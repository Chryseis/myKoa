{"version":3,"sources":["../../Infrastructure/httpHandle.js"],"names":["http","require","query","fs","host","port","httpRequest","ctx","Promise","resolve","request","header","options","path","url","substr","length","method","headers","requestBody","body","head","chunks","fileFields","files","boundaryKey","boundary","endData","filesLength","totallength","console","log","indexOf","stringify","Buffer","byteLength","JSON","fields","Math","random","toString","Object","keys","forEach","key","name","size","req","res","write","filesArr","uploadConnt","fileStream","createReadStream","on","unlinkSync","end","pipe","httpHandle","content","module","exports"],"mappings":"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","file":"httpHandle.js","sourcesContent":["/**\r\n * Created by AllenFeng on 2017/8/30.\r\n */\r\nconst http = require('http');\r\nconst query = require('querystring');\r\nconst fs = require('fs');\r\n\r\nconst host = '121.40.30.204';\r\nconst port = '1023';\r\n\r\n\r\nconst httpRequest = (ctx) => {\r\n    return new Promise((resolve) => {\r\n        delete ctx.request.header.host;\r\n        const options = {\r\n            host,\r\n            port,\r\n            path: ctx.request.url.substr(4, ctx.request.url.length),\r\n            method: ctx.request.method,\r\n            headers: ctx.request.header\r\n        }\r\n        let requestBody='',\r\n            body,\r\n            head,\r\n            chunks = [],\r\n            fileFields,\r\n            files,\r\n            boundaryKey,\r\n            boundary,\r\n            endData,\r\n            filesLength,\r\n            totallength = 0;\r\n\r\n        if (ctx.request.body) {\r\n            console.log(ctx.request.header['content-type'])\r\n            if (ctx.request.header['content-type'].indexOf('application/x-www-form-urlencoded') > -1) {\r\n                requestBody = query.stringify(ctx.request.body);\r\n                options.headers['Content-Length'] = Buffer.byteLength(requestBody)\r\n            } else if (ctx.request.header['content-type'].indexOf('application/json') > -1) {\r\n                requestBody = JSON.stringify(ctx.request.body);\r\n                options.headers['Content-Length'] = Buffer.byteLength(requestBody)\r\n            } else if (ctx.request.header['content-type'].indexOf('multipart/form-data') > -1) {\r\n                fileFields = ctx.request.body.fields;\r\n                files = ctx.request.body.files;\r\n                boundaryKey = Math.random().toString(16);\r\n                boundary = `\\r\\n----${boundaryKey}\\r\\n`;\r\n                endData = `\\r\\n----${boundaryKey}--`;\r\n                filesLength = 0;\r\n\r\n                Object.keys(fileFields).forEach((key) => {\r\n                    requestBody +=  `${boundary}Content-Disposition:form-data;name=\"${key}\"\\r\\n\\r\\n${fileFields[key]}`;\r\n                })\r\n\r\n                Object.keys(files).forEach((key) => {\r\n                    requestBody += `${boundary}Content-Type: application/octet-stream\\r\\nContent-Disposition: form-data; name=\"${key}\";filename=\"${files[key].name}\"\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n`;\r\n                    filesLength += Buffer.byteLength(requestBody) + files[key].size;\r\n                })\r\n\r\n                options.headers['Content-Type'] = `multipart/form-data; boundary=--${boundaryKey}`;\r\n                options.headers[`Content-Length`] = filesLength + Buffer.byteLength(endData);\r\n            } else {\r\n                requestBody = JSON.stringify(ctx.request.body)\r\n                options.headers['Content-Length'] = Buffer.byteLength(requestBody)\r\n            }\r\n        }\r\n\r\n        const req = http.request(options, (res) => {\r\n            // res.on('data', (chunk) => {\r\n            //     chunks.push(chunk);\r\n            //     totallength += chunk.length;\r\n            // })\r\n            //\r\n            // res.on('end', () => {\r\n            //     body = Buffer.concat(chunks, totallength);\r\n            //     head = res.headers;\r\n            //     resolve({head, body});\r\n            // })\r\n            resolve(res)\r\n        })\r\n\r\n        ctx.request.body && req.write(requestBody);\r\n\r\n        if (fileFields) {\r\n            let filesArr = Object.keys(files);\r\n            let uploadConnt = 0;\r\n            filesArr.forEach((key) => {\r\n                let fileStream = fs.createReadStream(files[key].path);\r\n                fileStream.on('end', () => {\r\n                    fs.unlinkSync(files[key].path);\r\n                    uploadConnt++;\r\n                    if (uploadConnt == filesArr.length) {\r\n                        req.end(endData)\r\n                    }\r\n                })\r\n                fileStream.pipe(req, {end: false})\r\n            })\r\n        } else {\r\n            req.end();\r\n        }\r\n\r\n    })\r\n}\r\n\r\nconst httpHandle = async(ctx) => {\r\n    let content = await httpRequest(ctx);\r\n    // ctx.type = content.head['content-type'];\r\n    // ctx.length = content.head['content-length'];\r\n    // ctx.body = content.body;\r\n    ctx.body=content\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    httpHandle\r\n}"]}