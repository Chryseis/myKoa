{"version":3,"sources":["../../Infrastructure/httpHandle.js"],"names":["http","require","host","port","httpRequest","ctx","request","header","options","path","url","substr","length","method","headers","console","log","req","res","body","setEncoding","on","chunk","write","end","getHandle","postHandle","putHandle","deleteHandle","module","exports"],"mappings":";;;;AAAA;;;AAGA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEA,IAAMC,OAAO,cAAb;AACA,IAAMC,OAAO,MAAb;;AAEA,IAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAS;AACzB;AACA,WAAOA,IAAIC,OAAJ,CAAYC,MAAZ,CAAmBL,IAA1B;AACA,QAAMM,UAAU;AACZN,kBADY;AAEZC,kBAFY;AAGZM,cAAMJ,IAAIC,OAAJ,CAAYI,GAAZ,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BN,IAAIC,OAAJ,CAAYI,GAAZ,CAAgBE,MAA1C,CAHM;AAIZC,gBAAQR,IAAIC,OAAJ,CAAYO,MAJR;AAKZC,iBAAST,IAAIC,OAAJ,CAAYC;AALT,KAAhB;;AAQAQ,YAAQC,GAAR,CAAYR,OAAZ;;AAEA,QAAMS,MAAMjB,KAAKM,OAAL,CAAaE,OAAb,EAAsB,UAACU,GAAD,EAAS;AACvC,YAAIC,OAAO,EAAX;;AAEAD,YAAIE,WAAJ,CAAgB,MAAhB;;AAEAF,YAAIG,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACtBP,oBAAQC,GAAR,CAAY,OAAZ,EAAoBM,KAApB;AACAH,mBAAOG,KAAP;AACH,SAHD;;AAKAJ,YAAIG,EAAJ,CAAO,KAAP,EAAc,YAAM;AAChBN,oBAAQC,GAAR,CAAYX,GAAZ,EAAgBc,IAAhB;AACA;AACAd,gBAAIc,IAAJ,GAASA,IAAT;AACH,SAJD;AAKH,KAfW,CAAZ;;AAiBAd,QAAIC,OAAJ,CAAYa,IAAZ,IAAoBF,IAAIM,KAAJ,CAAUlB,IAAIC,OAAJ,CAAYa,IAAtB,CAApB;AACAF,QAAIO,GAAJ;AACH,CAhCD;;AAmCA,IAAMC;AAAA,uEAAY,iBAAOpB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACRD,YAAYC,GAAZ,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAIA,IAAMqB,aAAa,SAAbA,UAAa,CAACrB,GAAD,EAAS,CAE3B,CAFD;;AAIA,IAAMsB,YAAY,SAAZA,SAAY,CAACtB,GAAD,EAAS,CAE1B,CAFD;;AAIA,IAAMuB,eAAe,SAAfA,YAAe,CAACvB,GAAD,EAAS,CAE7B,CAFD;;AAKAwB,OAAOC,OAAP,GAAiB;AACbL,wBADa;AAEbC,0BAFa;AAGbC,wBAHa;AAIbC;AAJa,CAAjB","file":"httpHandle.js","sourcesContent":["/**\r\n * Created by AllenFeng on 2017/8/30.\r\n */\r\nconst http = require('http');\r\n\r\nconst host = '192.168.1.32';\r\nconst port = '1023';\r\n\r\nconst httpRequest = (ctx) => {\r\n    debugger;\r\n    delete ctx.request.header.host;\r\n    const options = {\r\n        host,\r\n        port,\r\n        path: ctx.request.url.substr(4, ctx.request.url.length),\r\n        method: ctx.request.method,\r\n        headers: ctx.request.header\r\n    }\r\n\r\n    console.log(options);\r\n\r\n    const req = http.request(options, (res) => {\r\n        let body = '';\r\n\r\n        res.setEncoding('utf8');\r\n\r\n        res.on('data', (chunk) => {\r\n            console.log('chunk',chunk);\r\n            body = chunk;\r\n        })\r\n\r\n        res.on('end', () => {\r\n            console.log(ctx,body)\r\n            //ctx.type=res.headers['content-type'];\r\n            ctx.body=body;\r\n        })\r\n    })\r\n\r\n    ctx.request.body && req.write(ctx.request.body);\r\n    req.end();\r\n}\r\n\r\n\r\nconst getHandle = async (ctx) => {\r\n    await httpRequest(ctx)\r\n}\r\n\r\nconst postHandle = (ctx) => {\r\n\r\n}\r\n\r\nconst putHandle = (ctx) => {\r\n\r\n}\r\n\r\nconst deleteHandle = (ctx) => {\r\n\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    getHandle,\r\n    postHandle,\r\n    putHandle,\r\n    deleteHandle\r\n}"]}