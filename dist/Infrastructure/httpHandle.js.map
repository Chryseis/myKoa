{"version":3,"sources":["../../Infrastructure/httpHandle.js"],"names":["http","require","query","host","port","httpRequest","ctx","Promise","resolve","request","header","options","path","url","substr","length","method","headers","requestBody","body","stringify","JSON","console","log","req","res","setEncoding","on","chunk","write","end","httpHandle","module","exports"],"mappings":";;;;AAAA;;;AAGA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,QAAMD,QAAQ,aAAR,CAAZ;;AAEA,IAAME,OAAO,eAAb;AACA,IAAMC,OAAO,MAAb;;AAGA,IAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAS;AACzB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAW;AAC1B,eAAOF,IAAIG,OAAJ,CAAYC,MAAZ,CAAmBP,IAA1B;AACA,YAAMQ,UAAU;AACZR,sBADY;AAEZC,sBAFY;AAGZQ,kBAAMN,IAAIG,OAAJ,CAAYI,GAAZ,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BR,IAAIG,OAAJ,CAAYI,GAAZ,CAAgBE,MAA1C,CAHM;AAIZC,oBAAQV,IAAIG,OAAJ,CAAYO,MAJR;AAKZC,qBAASX,IAAIG,OAAJ,CAAYC;AALT,SAAhB;AAOA,YAAIQ,oBAAJ;AACA,YAAIC,aAAJ;;AAEA,YAAGb,IAAIG,OAAJ,CAAYC,MAAZ,CAAmB,cAAnB,MAAqC,kBAAxC,EAA2D;AACvDQ,0BAAYhB,MAAMkB,SAAN,CAAgBd,IAAIG,OAAJ,CAAYU,IAA5B,CAAZ;AACH,SAFD,MAEK;AACDD,0BAAYG,KAAKD,SAAL,CAAed,IAAIG,OAAJ,CAAYU,IAA3B,CAAZ;AACH;AACDG,gBAAQC,GAAR,CAAYZ,OAAZ,EAAoBT,MAAMkB,SAAN,CAAgBd,IAAIG,OAAJ,CAAYU,IAA5B,CAApB,EAAsDb,IAAIG,OAAJ,CAAYU,IAAlE;;AAEA,YAAMK,MAAMxB,KAAKS,OAAL,CAAaE,OAAb,EAAsB,UAACc,GAAD,EAAS;AACvCA,gBAAIC,WAAJ,CAAgB,MAAhB;;AAEAD,gBAAIE,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACtBN,wBAAQC,GAAR,CAAY,OAAZ,EAAqBK,KAArB;AACAT,uBAAOS,KAAP;AACApB,wBAAQW,IAAR;AACH,aAJD;;AAMAM,gBAAIE,EAAJ,CAAO,KAAP,EAAc,YAAM;AAChBL,wBAAQC,GAAR,CAAY,UAAZ;AACH,aAFD;AAGH,SAZW,CAAZ;;AAcAjB,YAAIG,OAAJ,CAAYU,IAAZ,IAAoBK,IAAIK,KAAJ,CAAUX,WAAV,CAApB;AACAM,YAAIM,GAAJ;AACH,KAnCM,CAAP;AAsCH,CAvCD;;AA0CA,IAAMC;AAAA,uEAAa,iBAAMzB,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACCD,YAAYC,GAAZ,CADD;;AAAA;AACXa,4BADW;;AAEfb,4BAAIa,IAAJ,GAASA,IAAT;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAMAa,OAAOC,OAAP,GAAiB;AACbF;AADa,CAAjB","file":"httpHandle.js","sourcesContent":["/**\r\n * Created by AllenFeng on 2017/8/30.\r\n */\r\nconst http = require('http');\r\nconst query=require('querystring')\r\n\r\nconst host = '192.168.2.110';\r\nconst port = '1023';\r\n\r\n\r\nconst httpRequest = (ctx) => {\r\n    return new Promise((resolve)=>{\r\n        delete ctx.request.header.host;\r\n        const options = {\r\n            host,\r\n            port,\r\n            path: ctx.request.url.substr(4, ctx.request.url.length),\r\n            method: ctx.request.method,\r\n            headers: ctx.request.header\r\n        }\r\n        let requestBody;\r\n        let body;\r\n\r\n        if(ctx.request.header['content-type']!=='application/json'){\r\n            requestBody=query.stringify(ctx.request.body)\r\n        }else{\r\n            requestBody=JSON.stringify(ctx.request.body)\r\n        }\r\n        console.log(options,query.stringify(ctx.request.body),ctx.request.body);\r\n\r\n        const req = http.request(options, (res) => {\r\n            res.setEncoding('utf8');\r\n\r\n            res.on('data', (chunk) => {\r\n                console.log('chunk', chunk);\r\n                body = chunk;\r\n                resolve(body);\r\n            })\r\n\r\n            res.on('end', () => {\r\n                console.log('响应中已无数据。')\r\n            })\r\n        })\r\n\r\n        ctx.request.body && req.write(requestBody);\r\n        req.end();\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nconst httpHandle = async(ctx) => {\r\n    let body= await httpRequest(ctx);\r\n    ctx.body=body;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    httpHandle\r\n}"]}