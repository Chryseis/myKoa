{"version":3,"sources":["../../Infrastructure/httpHandle.js"],"names":["http","require","query","host","port","httpRequest","ctx","Promise","resolve","request","header","options","path","url","substr","length","method","headers","requestBody","body","head","stringify","JSON","Buffer","byteLength","console","log","req","res","setEncoding","on","chunk","write","end","httpHandle","content","type","module","exports"],"mappings":";;;;AAAA;;;AAGA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;;AAEA,IAAME,OAAO,cAAb;AACA,IAAMC,OAAO,MAAb;;AAGA,IAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAS;AACzB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5B,eAAOF,IAAIG,OAAJ,CAAYC,MAAZ,CAAmBP,IAA1B;AACA,YAAMQ,UAAU;AACZR,sBADY;AAEZC,sBAFY;AAGZQ,kBAAMN,IAAIG,OAAJ,CAAYI,GAAZ,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BR,IAAIG,OAAJ,CAAYI,GAAZ,CAAgBE,MAA1C,CAHM;AAIZC,oBAAQV,IAAIG,OAAJ,CAAYO,MAJR;AAKZC,qBAASX,IAAIG,OAAJ,CAAYC;AALT,SAAhB;AAOA,YAAIQ,oBAAJ;AACA,YAAIC,aAAJ;AACA,YAAIC,aAAJ;;AAEA,YAAId,IAAIG,OAAJ,CAAYC,MAAZ,CAAmB,cAAnB,MAAuC,kBAA3C,EAA+D;AAC3DQ,0BAAchB,MAAMmB,SAAN,CAAgBf,IAAIG,OAAJ,CAAYU,IAA5B,CAAd;AACH,SAFD,MAEO;AACHD,0BAAcI,KAAKD,SAAL,CAAef,IAAIG,OAAJ,CAAYU,IAA3B,CAAd;AACH;AACDb,YAAIG,OAAJ,CAAYU,IAAZ,KAAqBR,QAAQM,OAAR,CAAgB,gBAAhB,IAAoCM,OAAOC,UAAP,CAAkBN,WAAlB,CAAzD;;AAEAO,gBAAQC,GAAR,CAAYf,OAAZ,EAAqBT,MAAMmB,SAAN,CAAgBf,IAAIG,OAAJ,CAAYU,IAA5B,CAArB,EAAwDb,IAAIG,OAAJ,CAAYU,IAApE;;AAEA,YAAMQ,MAAM3B,KAAKS,OAAL,CAAaE,OAAb,EAAsB,UAACiB,GAAD,EAAS;AACvCA,gBAAIC,WAAJ,CAAgB,MAAhB;;AAEAD,gBAAIE,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACtBN,wBAAQC,GAAR,CAAY,OAAZ,EAAqBK,KAArB;AACAZ,uBAAOY,KAAP;AACAX,uBAAKQ,IAAIX,OAAT;AACAT,wBAAQ,EAACY,UAAD,EAAMD,UAAN,EAAR;AACH,aALD;;AAOAS,gBAAIE,EAAJ,CAAO,KAAP,EAAc,YAAM,CAEnB,CAFD;AAGH,SAbW,CAAZ;;AAeAxB,YAAIG,OAAJ,CAAYU,IAAZ,IAAoBQ,IAAIK,KAAJ,CAAUd,WAAV,CAApB;AACAS,YAAIM,GAAJ;AACH,KAvCM,CAAP;AAwCH,CAzCD;;AA2CA,IAAMC;AAAA,uEAAa,iBAAM5B,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACKD,YAAYC,GAAZ,CADL;;AAAA;AACX6B,+BADW;;AAEfV,gCAAQC,GAAR,CAAYS,OAAZ;AACA7B,4BAAI8B,IAAJ,GAASD,QAAQf,IAAR,CAAa,cAAb,CAAT;AACAd,4BAAIa,IAAJ,GAAWgB,QAAQhB,IAAnB;;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAQAkB,OAAOC,OAAP,GAAiB;AACbJ;AADa,CAAjB","file":"httpHandle.js","sourcesContent":["/**\r\n * Created by AllenFeng on 2017/8/30.\r\n */\r\nconst http = require('http');\r\nconst query = require('querystring')\r\n\r\nconst host = '192.168.1.32';\r\nconst port = '1023';\r\n\r\n\r\nconst httpRequest = (ctx) => {\r\n    return new Promise((resolve) => {\r\n        delete ctx.request.header.host;\r\n        const options = {\r\n            host,\r\n            port,\r\n            path: ctx.request.url.substr(4, ctx.request.url.length),\r\n            method: ctx.request.method,\r\n            headers: ctx.request.header\r\n        }\r\n        let requestBody;\r\n        let body;\r\n        let head;\r\n\r\n        if (ctx.request.header['content-type'] !== 'application/json') {\r\n            requestBody = query.stringify(ctx.request.body)\r\n        } else {\r\n            requestBody = JSON.stringify(ctx.request.body)\r\n        }\r\n        ctx.request.body && (options.headers['Content-Length'] = Buffer.byteLength(requestBody))\r\n\r\n        console.log(options, query.stringify(ctx.request.body), ctx.request.body);\r\n\r\n        const req = http.request(options, (res) => {\r\n            res.setEncoding('utf8');\r\n\r\n            res.on('data', (chunk) => {\r\n                console.log('chunk', chunk);\r\n                body = chunk;\r\n                head=res.headers;\r\n                resolve({head,body});\r\n            })\r\n\r\n            res.on('end', () => {\r\n\r\n            })\r\n        })\r\n\r\n        ctx.request.body && req.write(requestBody);\r\n        req.end();\r\n    })\r\n}\r\n\r\nconst httpHandle = async(ctx) => {\r\n    let content = await httpRequest(ctx);\r\n    console.log(content)\r\n    ctx.type=content.head['content-type'];\r\n    ctx.body = content.body;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    httpHandle\r\n}"]}