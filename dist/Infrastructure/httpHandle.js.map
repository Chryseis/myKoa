{"version":3,"sources":["../../Infrastructure/httpHandle.js"],"names":["http","require","query","fs","host","port","httpRequest","ctx","Promise","resolve","request","header","options","path","url","substr","length","method","headers","requestBody","body","head","chunks","fileFields","files","boundaryKey","boundary","endData","filesLength","totallength","console","log","indexOf","stringify","Buffer","byteLength","JSON","fields","Math","random","toString","Object","keys","forEach","key","name","size","req","res","on","chunk","push","concat","write","filesArr","uploadConnt","fileStream","createReadStream","unlinkSync","end","pipe","httpHandle","content","type","module","exports"],"mappings":"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","file":"httpHandle.js","sourcesContent":["/**\n * Created by AllenFeng on 2017/8/30.\n */\nconst http = require('http');\nconst query = require('querystring');\nconst fs = require('fs');\n\nconst host = '192.168.1.32';\nconst port = '1023';\n\n\nconst httpRequest = (ctx) => {\n    return new Promise((resolve) => {\n        delete ctx.request.header.host;\n        const options = {\n            host,\n            port,\n            path: ctx.request.url.substr(4, ctx.request.url.length),\n            method: ctx.request.method,\n            headers: ctx.request.header\n        }\n        let requestBody='',\n            body,\n            head,\n            chunks = [],\n            fileFields,\n            files,\n            boundaryKey,\n            boundary,\n            endData,\n            filesLength,\n            totallength = 0;\n\n        if (ctx.request.body) {\n            console.log(ctx.request.header['content-type'])\n            if (ctx.request.header['content-type'].indexOf('application/x-www-form-urlencoded') > -1) {\n                requestBody = query.stringify(ctx.request.body);\n                options.headers['Content-Length'] = Buffer.byteLength(requestBody)\n            } else if (ctx.request.header['content-type'].indexOf('application/json') > -1) {\n                requestBody = JSON.stringify(ctx.request.body);\n                options.headers['Content-Length'] = Buffer.byteLength(requestBody)\n            } else if (ctx.request.header['content-type'].indexOf('multipart/form-data') > -1) {\n                fileFields = ctx.request.body.fields;\n                files = ctx.request.body.files;\n                boundaryKey = Math.random().toString(16);\n                boundary = `\\r\\n----${boundaryKey}\\r\\n`;\n                endData = `\\r\\n----${boundaryKey}--`;\n                filesLength = 0;\n\n                Object.keys(fileFields).forEach((key) => {\n                    requestBody +=  `${boundary}Content-Disposition:form-data;name=\"${key}\"\\r\\n\\r\\n${fileFields[key]}`;\n                })\n\n                Object.keys(files).forEach((key) => {\n                    requestBody += `${boundary}Content-Type: application/octet-stream\\r\\nContent-Disposition: form-data; name=\"${key}\";filename=\"${files[key].name}\"\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n`;\n                    filesLength += Buffer.byteLength(requestBody) + files[key].size;\n                })\n\n                options.headers['Content-Type'] = `multipart/form-data; boundary=--${boundaryKey}`;\n                options.headers[`Content-Length`] = filesLength + Buffer.byteLength(endData);\n            } else {\n                requestBody = JSON.stringify(ctx.request.body)\n                options.headers['Content-Length'] = Buffer.byteLength(requestBody)\n            }\n        }\n\n        const req = http.request(options, (res) => {\n            res.on('data', (chunk) => {\n                chunks.push(chunk);\n                totallength += chunk.length;\n            })\n\n            res.on('end', () => {\n                body = Buffer.concat(chunks, totallength);\n                head = res.headers;\n                resolve({head, body});\n            })\n        })\n\n        ctx.request.body && req.write(requestBody);\n\n        if (fileFields) {\n            let filesArr = Object.keys(files);\n            let uploadConnt = 0;\n            filesArr.forEach((key) => {\n                let fileStream = fs.createReadStream(files[key].path);\n                fileStream.on('end', () => {\n                    fs.unlinkSync(files[key].path);\n                    uploadConnt++;\n                    if (uploadConnt == filesArr.length) {\n                        req.end(endData)\n                    }\n                })\n                fileStream.pipe(req, {end: false})\n            })\n        } else {\n            req.end();\n        }\n\n    })\n}\n\nconst httpHandle = async(ctx) => {\n    let content = await httpRequest(ctx);\n    ctx.type = content.head['content-type'];\n    ctx.length = content.head['content-length'];\n    ctx.body = content.body;\n}\n\n\nmodule.exports = {\n    httpHandle\n}"]}