{"version":3,"sources":["../../Infrastructure/httpHandle.js"],"names":["http","require","query","host","port","httpRequest","ctx","Promise","resolve","request","header","options","path","url","substr","length","method","headers","requestBody","body","head","chunks","totallength","console","log","indexOf","stringify","JSON","Buffer","byteLength","req","res","on","chunk","push","concat","write","end","httpHandle","content","type","module","exports"],"mappings":";;;;AAAA;;;AAGA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;;AAEA,IAAME,OAAO,cAAb;AACA,IAAMC,OAAO,MAAb;;AAGA,IAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAS;AACzB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5B,eAAOF,IAAIG,OAAJ,CAAYC,MAAZ,CAAmBP,IAA1B;AACA,YAAMQ,UAAU;AACZR,sBADY;AAEZC,sBAFY;AAGZQ,kBAAMN,IAAIG,OAAJ,CAAYI,GAAZ,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BR,IAAIG,OAAJ,CAAYI,GAAZ,CAAgBE,MAA1C,CAHM;AAIZC,oBAAQV,IAAIG,OAAJ,CAAYO,MAJR;AAKZC,qBAASX,IAAIG,OAAJ,CAAYC;AALT,SAAhB;AAOA,YAAIQ,oBAAJ;AACA,YAAIC,aAAJ;AACA,YAAIC,aAAJ;AACA,YAAIC,SAAS,EAAb;AACA,YAAIC,cAAc,CAAlB;;AAEA,YAAIhB,IAAIG,OAAJ,CAAYU,IAAhB,EAAsB;AAClBI,oBAAQC,GAAR,CAAYlB,IAAIG,OAAJ,CAAYC,MAAZ,CAAmB,cAAnB,CAAZ;AACA,gBAAIJ,IAAIG,OAAJ,CAAYC,MAAZ,CAAmB,cAAnB,EAAmCe,OAAnC,CAA2C,mCAA3C,IAAkF,CAAC,CAAvF,EAA0F;AACtFP,8BAAchB,MAAMwB,SAAN,CAAgBpB,IAAIG,OAAJ,CAAYU,IAA5B,CAAd;AACH,aAFD,MAEO,IAAIb,IAAIG,OAAJ,CAAYC,MAAZ,CAAmB,cAAnB,EAAmCe,OAAnC,CAA2C,kBAA3C,IAAiE,CAAC,CAAtE,EAAyE;AAC5EP,8BAAcS,KAAKD,SAAL,CAAepB,IAAIG,OAAJ,CAAYU,IAA3B,CAAd;AACH,aAFM,MAEA,IAAIb,IAAIG,OAAJ,CAAYC,MAAZ,CAAmB,cAAnB,EAAmCe,OAAnC,CAA2C,qBAA3C,IAAoE,CAAC,CAAzE,EAA4E;AAC/EP,8BAAcS,KAAKD,SAAL,CAAepB,IAAIG,OAAJ,CAAYU,IAA3B,CAAd;AACH,aAFM,MAEA;AACHD,8BAAcS,KAAKD,SAAL,CAAepB,IAAIG,OAAJ,CAAYU,IAA3B,CAAd;AACH;AACDR,oBAAQM,OAAR,CAAgB,gBAAhB,IAAoCW,OAAOC,UAAP,CAAkBX,WAAlB,CAApC;AACH;;AAED,YAAMY,MAAM9B,KAAKS,OAAL,CAAaE,OAAb,EAAsB,UAACoB,GAAD,EAAS;AACvCA,gBAAIC,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACtBZ,uBAAOa,IAAP,CAAYD,KAAZ;AACAX,+BAAeW,MAAMlB,MAArB;AACH,aAHD;;AAKAgB,gBAAIC,EAAJ,CAAO,KAAP,EAAc,YAAM;AAChBb,uBAAOS,OAAOO,MAAP,CAAcd,MAAd,EAAsBC,WAAtB,CAAP;AACAF,uBAAOW,IAAId,OAAX;AACAT,wBAAQ,EAACY,UAAD,EAAOD,UAAP,EAAR;AACH,aAJD;AAKH,SAXW,CAAZ;;AAaAb,YAAIG,OAAJ,CAAYU,IAAZ,IAAoBW,IAAIM,KAAJ,CAAUlB,WAAV,CAApB;AACAY,YAAIO,GAAJ;AACH,KA5CM,CAAP;AA6CH,CA9CD;;AAgDA,IAAMC;AAAA,uEAAa,iBAAMhC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACKD,YAAYC,GAAZ,CADL;;AAAA;AACXiC,+BADW;;AAEfhB,gCAAQC,GAAR,CAAYe,OAAZ,EAAqBA,QAAQnB,IAAR,CAAa,cAAb,CAArB;AACAd,4BAAIkC,IAAJ,GAAWD,QAAQnB,IAAR,CAAa,cAAb,CAAX;AACAd,4BAAIS,MAAJ,GAAawB,QAAQnB,IAAR,CAAa,gBAAb,CAAb;AACAd,4BAAIa,IAAJ,GAAWoB,QAAQpB,IAAnB;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAUAsB,OAAOC,OAAP,GAAiB;AACbJ;AADa,CAAjB","file":"httpHandle.js","sourcesContent":["/**\n * Created by AllenFeng on 2017/8/30.\n */\nconst http = require('http');\nconst query = require('querystring')\n\nconst host = '192.168.1.32';\nconst port = '1023';\n\n\nconst httpRequest = (ctx) => {\n    return new Promise((resolve) => {\n        delete ctx.request.header.host;\n        const options = {\n            host,\n            port,\n            path: ctx.request.url.substr(4, ctx.request.url.length),\n            method: ctx.request.method,\n            headers: ctx.request.header\n        }\n        let requestBody;\n        let body;\n        let head;\n        let chunks = [];\n        let totallength = 0;\n\n        if (ctx.request.body) {\n            console.log(ctx.request.header['content-type'])\n            if (ctx.request.header['content-type'].indexOf('application/x-www-form-urlencoded') > -1) {\n                requestBody = query.stringify(ctx.request.body)\n            } else if (ctx.request.header['content-type'].indexOf('application/json') > -1) {\n                requestBody = JSON.stringify(ctx.request.body)\n            } else if (ctx.request.header['content-type'].indexOf('multipart/form-data') > -1) {\n                requestBody = JSON.stringify(ctx.request.body)\n            } else {\n                requestBody = JSON.stringify(ctx.request.body)\n            }\n            options.headers['Content-Length'] = Buffer.byteLength(requestBody)\n        }\n\n        const req = http.request(options, (res) => {\n            res.on('data', (chunk) => {\n                chunks.push(chunk);\n                totallength += chunk.length;\n            })\n\n            res.on('end', () => {\n                body = Buffer.concat(chunks, totallength);\n                head = res.headers;\n                resolve({head, body});\n            })\n        })\n\n        ctx.request.body && req.write(requestBody);\n        req.end();\n    })\n}\n\nconst httpHandle = async(ctx) => {\n    let content = await httpRequest(ctx);\n    console.log(content, content.head['content-type'])\n    ctx.type = content.head['content-type'];\n    ctx.length = content.head['content-length'];\n    ctx.body = content.body;\n\n}\n\n\nmodule.exports = {\n    httpHandle\n}"]}