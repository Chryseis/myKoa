{"version":3,"sources":["../../router/koaRouter.js"],"names":["fs","require","Router","getHandle","postHandle","putHandle","deleteHandle","render","page","Promise","resolve","reject","viewUrl","readFile","err","data","api","get","post","ctx","console","log","put","del","common","body","router","use","routes","allowedMethods","module","exports"],"mappings":";;;;AAAA;;;AAGA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,SAASD,QAAQ,YAAR,CAAf;;eACuDA,QAAQ,8BAAR,C;IAAhDE,S,YAAAA,S;IAAWC,U,YAAAA,U;IAAYC,S,YAAAA,S;IAAWC,Y,YAAAA,Y;;AAEzC,IAAMC,SAAS,SAATA,MAAS,CAACC,IAAD,EAAU;AACrB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIC,sBAAoBJ,IAAxB;AACAR,WAAGa,QAAH,CAAYD,OAAZ,EAAqB,QAArB,EAA+B,UAACE,GAAD,EAAMC,IAAN,EAAe;AAC1C,gBAAID,GAAJ,EAAS;AACLH,uBAAOG,GAAP;AACH,aAFD,MAEO;AACHJ,wBAAQK,IAAR;AACH;AACJ,SAND;AAOH,KATM,CAAP;AAUH,CAXD;;AAaA,IAAIC,MAAM,IAAId,MAAJ,EAAV;;AAEAc,IAAIC,GAAJ,CAAQ,GAAR,EAAad,SAAb,EACKe,IADL,CACU,GADV;AAAA,uEACe,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AACXC,gCAAQC,GAAR,CAAY,CAAZ;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADf;;AAAA;AAAA;AAAA;AAAA,KAGGC,GAHH,CAGO,GAHP;AAAA,wEAGY,kBAAMH,GAAN;AAAA;AAAA;AAAA;AAAA;AACRC,gCAAQC,GAAR,CAAY,CAAZ;;AADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHZ;;AAAA;AAAA;AAAA;AAAA,KAKGE,GALH,CAKO,GALP;AAAA,wEAKY,kBAAMJ,GAAN;AAAA;AAAA;AAAA;AAAA;AACRC,gCAAQC,GAAR,CAAY,CAAZ;;AADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALZ;;AAAA;AAAA;AAAA;AAAA;;AASA,IAAIG,SAAS,IAAItB,MAAJ,EAAb;AACAsB,OAAOP,GAAP,CAAW,GAAX;AAAA,wEAAgB,kBAAME,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACKZ,OAAO,YAAP,CADL;;AAAA;AACZY,4BAAIM,IADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA;;AAIA,IAAIC,SAAS,IAAIxB,MAAJ,EAAb;AACAwB,OAAOC,GAAP,CAAW,MAAX,EAAmBX,IAAIY,MAAJ,EAAnB,EAAiCZ,IAAIa,cAAJ,EAAjC;AACAH,OAAOC,GAAP,CAAW,GAAX,EAAgBH,OAAOI,MAAP,EAAhB,EAAiCJ,OAAOK,cAAP,EAAjC;;AAGAC,OAAOC,OAAP,GAAiBL,MAAjB","file":"koaRouter.js","sourcesContent":["/**\r\n * Created by AllenFeng on 2017/8/29.\r\n */\r\nconst fs = require('fs')\r\nconst Router = require('koa-router');\r\nconst {getHandle, postHandle, putHandle, deleteHandle}=require('../Infrastructure/httpHandle');\r\n\r\nconst render = (page) => {\r\n    return new Promise((resolve, reject) => {\r\n        let viewUrl = `./view/${page}`\r\n        fs.readFile(viewUrl, \"binary\", (err, data) => {\r\n            if (err) {\r\n                reject(err)\r\n            } else {\r\n                resolve(data)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nlet api = new Router();\r\n\r\napi.get('*', getHandle)\r\n    .post('*', async(ctx) => {\r\n    console.log(2)\r\n}).put('*', async(ctx) => {\r\n    console.log(3)\r\n}).del('*', async(ctx) => {\r\n    console.log(4);\r\n});\r\n\r\nlet common = new Router();\r\ncommon.get('*', async(ctx) => {\r\n    ctx.body = await render('index.html');\r\n})\r\n\r\nlet router = new Router();\r\nrouter.use('/app', api.routes(), api.allowedMethods());\r\nrouter.use('/', common.routes(), common.allowedMethods());\r\n\r\n\r\nmodule.exports = router;\r\n\r\n\r\n\r\n"]}